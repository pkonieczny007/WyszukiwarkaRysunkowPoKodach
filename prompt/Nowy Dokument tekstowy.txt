popraw dzialanie skryptu do eksportu_danych z bazy. Potrzebuje aby pobierał nowy plik do katalogu  
C:\WyszukiwarkaRysunkowPoKodach\app\data

plik export1.csv

jezeli istnieje to stary plik zamienia na oldexport1.csv
za każdym razem pobiera całą bazę


oto skrypt: import pyodbc 
import pandas as pd
from datetime import datetime
import os

server = 'ES-SRV\LANTEKSQL2019'
database = 'Energosolver_DB_0_9'
table = 'MMNN_MMOO_00000100'
columns = ['PrdRef', 'RecID', 'CrtDate']
username = 'sa'
password = ''
output_folder = r'C:\Lantek\Eksport_Danych'
last_export_file = r'C:\Lantek\Eksport_Danych\last_export_time.txt'


def ensure_directory_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)


def get_last_export_time():
    try:
        with open(last_export_file, 'r') as f:
            return datetime.fromisoformat(f.read().strip())
    except FileNotFoundError:
        return datetime.min


def save_last_export_time(export_time):
    with open(last_export_file, 'w') as f:
        f.write(export_time.isoformat())


def fetch_new_records(last_export_time):
    connection_string = f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password};"
    query = f"""
        SELECT {', '.join(columns)}
        FROM {table}
        WHERE CrtDate > ?
        ORDER BY CrtDate ASC;
    """
    with pyodbc.connect(connection_string) as conn:
        df = pd.read_sql(query, conn, params=[last_export_time])
        print(f"Kolumny w danych: {df.columns}")
        print(f"Pierwsze 5 rekordów:\n{df.head()}")
        return df


def save_to_csv(data, timestamp):
    if data.empty:
        print("Brak nowych rekordów do zapisania.")
        return
    filename = f"{output_folder}\\export_{timestamp.strftime('%Y%m%d_%H%M%S')}.csv"
    data.to_csv(filename, index=False, sep=';', encoding='utf-8')
    print(f"Zapisano plik: {filename}")


def main():
    ensure_directory_exists(output_folder)
    last_export_time = get_last_export_time()
    print(f"Czas ostatniego eksportu: {last_export_time}")
    new_data = fetch_new_records(last_export_time)
    print(f"Liczba nowych rekordów: {len(new_data)}")
    current_time = datetime.now()
    save_to_csv(new_data, current_time)
    save_last_export_time(current_time)


if __name__ == "__main__":
    main()

